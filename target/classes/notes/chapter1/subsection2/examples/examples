-----------------------------------------------
1.2-1
-----------------------------------------------
Give an example of an application that requires algorithmic content at the application
level, and discuss the function of the algorithms involved.

- Sorting a listing. If you want to get really performant then this might (probably will) 
  involve query optimization and paging of results. 
-----------------------------------------------
1.2-2
-----------------------------------------------
Suppose we are comparing implementations of insertion sort and merge sort on the
same machine. For inputs of size n, insertion sort runs in 8n2 steps, while merge
sort runs in 64n lg n steps. For which values of n does insertion sort beat merge
sort?

The crossover point would be: 

Insertion sort time = Merge sort time

8n^2 = 64 n lg (n) 

n^2 = 8 n lg(n)

n = 8 lg(n)

n = 8 lg(n)

n/8 = lg(n)

This is imprtant for me to remember. First get things in terms of lg(n). Then to cancel 
out lg(n) you do 2^(blah) on both sides. 

2^n/8 = n

Then just plug numbers in 

2^8/8 = 2 which is less than 8

Let's go higher!

2^n/8 = n

2^16/8 = 4 whilst n = 16

Higher still!

2^32/8 = 2 ^ 4 = 2 x 2 x 2 x 2 = 4 x 4 = 16

which is still not high enough!

2^64/8 = 2 ^ 8 = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 

= 4 x 4 x 4 x 4 

= 16 x 16

= 256

Which is > 64.

So somewhere between those two.  
-----------------------------------------------
1.2-3
-----------------------------------------------
What is the smallest value of n such that an algorithm whose running time is 100n2
runs faster than an algorithm whose running time is 2n on the same machine?

100n^2 < 2^n

n = 1

100 (1^2) = 100 (1 x 1) = 100

2^1 = 2

Let's go higher!

100 (2^2) = 100 (4) = 400

comparing with 2^2 = 4

Higher!

100 (16x16) = 100 * 256 = 256,000

2 ^ 16 = 65,536

Keep going!

Actually I have run out of fucks to give. Might come back to this!